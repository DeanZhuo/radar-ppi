cmake_minimum_required(VERSION 3.10)
project(radar_main_app)

set(CMAKE_CXX_STANDARD 17)

file(GLOB SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")

add_executable(radar_main_app ${SRC_FILES})

target_include_directories(radar_main_app
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

# Link only to the highest-level library your app uses
target_link_libraries(radar_main_app PRIVATE radar_gl_api ws2_32)

add_definitions(-DGLEW_STATIC)

# Optional: Define runtime output directory
set_target_properties(radar_main_app PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Handle DLLs on MinGW
if (MINGW)
  set(OUTPUT_DIR ${CMAKE_BINARY_DIR}/bin)

  find_file(FREEGLUT_DLL libfreeglut.dll HINTS ${GLUT} PATH_SUFFIXES bin)
  find_file(GLEW_DLL glew32.dll HINTS ${GLEW} PATH_SUFFIXES bin)
  find_file(STDCPP_DLL libstdc++-6.dll HINTS ${CMAKE_CXX_COMPILER} PATH_SUFFIXES ../bin)
  find_file(GCC_S_SEH_DLL libgcc_s_seh-1.dll HINTS ${CMAKE_CXX_COMPILER} PATH_SUFFIXES ../bin)
  find_file(WIN_PTHREAD_DLL libwinpthread-1.dll HINTS ${CMAKE_CXX_COMPILER} PATH_SUFFIXES ../bin)

  if(FREEGLUT_DLL AND GLEW_DLL AND STDCPP_DLL AND GCC_S_SEH_DLL AND WIN_PTHREAD_DLL)
    add_custom_command(TARGET radar_main_app POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_if_different
      ${FREEGLUT_DLL} ${GLEW_DLL} ${STDCPP_DLL} ${GCC_S_SEH_DLL} ${WIN_PTHREAD_DLL}
      ${OUTPUT_DIR}
      COMMENT "Copying runtime DLLs"
    )
  else()
    message(WARNING "One or more runtime DLLs not found")
  endif()
endif()
